[build-system]
requires = [ "setuptools", "setuptools_scm" ]
build-backend = "setuptools.build_meta"
 
[project]
name = "ts_IntegrationTests"
description = "TSSW integration test scripts."
license = { text = "GPL" }
classifiers = [ "Programming Language :: Python :: 3" ]
urls = { documentation = "https://jira.lsstcorp.org/secure/Dashboard.jspa", repository = "https://github.com/lsst-ts/ts_IntegrationTests" }
dynamic = [ "version" ]
 
[tools.setuptools]
package-data = {"" = "*.csv"}
 
[tool.setuptools.dynamic]
version = { attr = "setuptools_scm.get_version" }
 
[tool.setuptools.packages.find]
where = [ "python" ]
 
[project.scripts]
auxtel_disabled_enabled = "lsst.ts.IntegrationTests.auxtel_disabled_enabled:run_auxtel_disabled_enabled"
auxtel_enable_atcs = "lsst.ts.IntegrationTests.auxtel_enable_atcs:run_auxtel_enable_atcs"
auxtel_housekeeping = "lsst.ts.IntegrationTests.auxtel_housekeeping:run_auxtel_housekeeping"
auxtel_image_taking = "lsst.ts.IntegrationTests.image_taking_verification:run_auxtel_image_taking"
auxtel_latiss_acquire = "lsst.ts.IntegrationTests.auxtel_latiss_acquire:run_auxtel_latiss_acquire"
auxtel_latiss_take_sequence = "lsst.ts.IntegrationTests.auxtel_latiss_take_sequence:run_auxtel_latiss_take_sequence"
auxtel_latiss_acquire_and_take_sequence = "lsst.ts.IntegrationTests.auxtel_latiss_acquire_and_take_sequence:run_auxtel_latiss_acquire_and_take_sequence"
auxtel_latiss_calibrations = "lsst.ts.IntegrationTests.auxtel_latiss_calibrations:run_auxtel_latiss_calibrations"
auxtel_latiss_checkout = "lsst.ts.IntegrationTests.auxtel_latiss_checkout:run_auxtel_latiss_checkout"
auxtel_latiss_wep_align = "lsst.ts.IntegrationTests.auxtel_latiss_wep_align:run_auxtel_latiss_wep_align"
auxtel_offline_standby = "lsst.ts.IntegrationTests.auxtel_offline_standby:run_auxtel_offline_standby"
auxtel_prepare_for_flat = "lsst.ts.IntegrationTests.auxtel_prepare_for_flat:run_auxtel_prepare_for_flat"
auxtel_prepare_for_onsky = "lsst.ts.IntegrationTests.auxtel_prepare_for_onsky:run_auxtel_prepare_for_onsky"
auxtel_reset_offsets = "lsst.ts.IntegrationTests.auxtel_reset_offsets:run_auxtel_reset_offsets"
auxtel_shutdown = "lsst.ts.IntegrationTests.auxtel_shutdown:run_auxtel_shutdown"
auxtel_slew_and_take_image_checkout = "lsst.ts.IntegrationTests.auxtel_slew_and_take_image_checkout:run_auxtel_slew_and_take_image_checkout"
auxtel_standby_disabled = "lsst.ts.IntegrationTests.auxtel_standby_disabled:run_auxtel_standby_disabled"
auxtel_stop = "lsst.ts.IntegrationTests.auxtel_stop:run_auxtel_stop"
auxtel_telescope_and_dome_checkout = "lsst.ts.IntegrationTests.auxtel_telescope_and_dome_checkout:run_auxtel_telescope_and_dome_checkout"
auxtel_track_target = "lsst.ts.IntegrationTests.auxtel_track_target:run_auxtel_track_target"
auxtel_visit = "lsst.ts.IntegrationTests.auxtel_visit:run_auxtel_visit"
comcam_calibrations = "lsst.ts.IntegrationTests.comcam_calibrations:run_comcam_calibrations"
comcam_housekeeping = "lsst.ts.IntegrationTests.maintel_housekeeping:run_comcam_housekeeping"
comcam_image_taking = "lsst.ts.IntegrationTests.image_taking_verification:run_comcam_image_taking"
eas_disabled_enabled = "lsst.ts.IntegrationTests.eas_disabled_enabled:run_eas_disabled_enabled"
eas_standby_disabled = "lsst.ts.IntegrationTests.eas_standby_disabled:run_eas_standby_disabled"
gencam_disabled_enabled = "lsst.ts.IntegrationTests.gencam_disabled_enabled:run_gencam_disabled_enabled"
gencam_standby_disabled = "lsst.ts.IntegrationTests.gencam_standby_disabled:run_gencam_standby_disabled"
enabled_offline = "lsst.ts.IntegrationTests.enabled_offline:run_enabled_offline"
lsstcam_housekeeping = "lsst.ts.IntegrationTests.maintel_housekeeping:run_lsstcam_housekeeping"
lsstcam_image_taking = "lsst.ts.IntegrationTests.image_taking_verification:run_lsstcam_image_taking"
maintel_disabled_enabled = "lsst.ts.IntegrationTests.maintel_disabled_enabled:run_maintel_disabled_enabled"
maintel_housekeeping = "lsst.ts.IntegrationTests.maintel_housekeeping:run_maintel_housekeeping"
maintel_standby_disabled = "lsst.ts.IntegrationTests.maintel_standby_disabled:run_maintel_standby_disabled"
obssys_disabled_enabled = "lsst.ts.IntegrationTests.obssys_disabled_enabled:run_obssys_disabled_enabled"
obssys_standby_disabled = "lsst.ts.IntegrationTests.obssys_standby_disabled:run_obssys_standby_disabled"
run_command = "lsst.ts.IntegrationTests.run_command:run_command"
csc_state_transition = "lsst.ts.IntegrationTests.csc_state_transition:csc_state_transition"
load_camera_playlist = "lsst.ts.IntegrationTests.load_camera_playlist:load_camera_playlist"
love_stress_test = "lsst.ts.IntegrationTests.love_stress_test:run_love_stress_test"
 
[tool.setuptools_scm]
write_to = "python/lsst/ts/IntegrationTests/version.py"
write_to_template = """
# Generated by setuptools_scm
__all__ = ["__version__"]
__version__ = "{version}"
"""
 
[tool.pytest.ini_options]
asyncio_mode = "auto"
 
[tool.mypy]
disallow_untyped_defs = "True"
ignore_missing_imports = "True"
# The following only excludes version.py when running mypy from the command line.
# `--ignore-glob=*/version.py` in `[tool:pytest]` excludes the file from pytest,
# because pytest explicitly specifies each file being tested, and that overrides mypy's exclude.
exclude = "version.py"
 
[project.optional-dependencies]
doc = [
  "documenteer[pipelines]",
]
test = [
  "yamllint", "parameterized",
]
