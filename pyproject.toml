[build-system]
requires = [ "setuptools", "setuptools_scm" ]
build-backend = "setuptools.build_meta"
 
[project]
name = "ts_IntegrationTests"
description = "TSSW integration test scripts."
license = { text = "GPL" }
classifiers = [ "Programming Language :: Python :: 3" ]
urls = { documentation = "https://jira.lsstcorp.org/secure/Dashboard.jspa", repository = "https://github.com/lsst-ts/ts_IntegrationTests" }
dynamic = [ "version" ]
dependencies = [ "yamllint" ]
 
[tools.setuptools]
package-data = {"" = "*.csv"}
 
[tool.setuptools.dynamic]
version = { attr = "setuptools_scm.get_version" }
 
[tool.setuptools.packages.find]
where = [ "python" ]
 
[project.scripts]
auxtel_disabled_enabled = "lsst.ts.IntegrationTests.auxtel_disabled_enabled:run_auxtel_disabled_enabled"
auxtel_housekeeping = "lsst.ts.IntegrationTests.auxtel_housekeeping:run_auxtel_housekeeping"
auxtel_image_taking = "lsst.ts.IntegrationTests.image_taking_verification:run_auxtel_image_taking"
auxtel_offline_standby = "lsst.ts.IntegrationTests.auxtel_offline_standby:run_auxtel_offline_standby"
auxtel_prepare_for_flatfield = "lsst.ts.IntegrationTests.auxtel_prepare_for_flatfield:run_auxtel_prepare_for_flatfield"
auxtel_prepare_for_onsky = "lsst.ts.IntegrationTests.auxtel_prepare_for_onsky:run_auxtel_prepare_for_onsky"
auxtel_shutdown = "lsst.ts.IntegrationTests.auxtel_shutdown:run_auxtel_shutdown"
auxtel_standby_disabled = "lsst.ts.IntegrationTests.auxtel_standby_disabled:run_auxtel_standby_disabled"
auxtel_stop = "lsst.ts.IntegrationTests.auxtel_stop:run_auxtel_stop"
auxtel_track_target = "lsst.ts.IntegrationTests.auxtel_track_target:run_auxtel_track_target"
auxtel_visit = "lsst.ts.IntegrationTests.auxtel_visit:run_auxtel_visit"
comcam_image_taking = "lsst.ts.IntegrationTests.image_taking_verification:run_comcam_image_taking"
eas_disabled_enabled = "lsst.ts.IntegrationTests.eas_disabled_enabled:run_eas_disabled_enabled"
eas_standby_disabled = "lsst.ts.IntegrationTests.eas_standby_disabled:run_eas_standby_disabled"
enabled_offline = "lsst.ts.IntegrationTests.enabled_offline:run_enabled_offline"
maintel_disabled_enabled = "lsst.ts.IntegrationTests.maintel_disabled_enabled:run_maintel_disabled_enabled"
maintel_housekeeping = "lsst.ts.IntegrationTests.maintel_housekeeping:run_maintel_housekeeping"
maintel_offline_standby = "lsst.ts.IntegrationTests.maintel_offline_standby:run_maintel_offline_standby"
maintel_standby_disabled = "lsst.ts.IntegrationTests.maintel_standby_disabled:run_maintel_standby_disabled"
obssys2_disabled_enabled = "lsst.ts.IntegrationTests.obssys2_disabled_enabled:run_obssys2_disabled_enabled"
obssys2_standby_disabled = "lsst.ts.IntegrationTests.obssys2_standby_disabled:run_obssys2_standby_disabled"
run_camera_playlist = "lsst.ts.IntegrationTests.run_camera_playlist:run_camera_playlist"
 
[tool.setuptools_scm]
write_to = "python/lsst/ts/IntegrationTests/version.py"
write_to_template = """
# Generated by setuptools_scm
__all__ = ["__version__"]
__version__ = "{version}"
"""
 
[tool.pytest.ini_options]
addopts = "--black --flake8 --mypy --ignore-glob=*/version.py"
flake8-ignore = ["E133", "E203", "E226", "E228", "N802", "N803", "N806", "N812", "N813", "N815", "N816", "W503"]
flake8-max-line-length = 110
flake8-max-doc-length = 79
asyncio_mode = "auto"
 
[tool.mypy]
disallow_untyped_defs = "True"
ignore_missing_imports = "True"
# The following only excludes version.py when running mypy from the command line.
# `--ignore-glob=*/version.py` in `[tool:pytest]` excludes the file from pytest,
# because pytest explicitly specifies each file being tested, and that overrides mypy's exclude.
exclude = "version.py"
 
[project.optional-dependencies]
dev = [
  "documenteer[pipelines]",
]
